@page "/forms/validateformdemo"
@inject ILogger<ValidateFormDemo> log
@rendermode InteractiveAuto

<h3>ValidateFormDemo</h3>

<!-- The Model in the tag is NOT the datatype, it is the name of the object in the code section -->
<EditForm Enhance Model="Person" method="post" FormName="PersonFormEnahnce" OnValidSubmit="SubmitForm">
    <DataAnnotationsValidator />
    <!-- ValidationarySummary will put a summary of all form issues at the top of the form
    <ValidationSummary />
    -->

    <div class="mb-3">
        <label>First Name:</label>
        <InputText @bind-Value="Person.FirstName" DisplayName="First Name"/> <!-- This bind tot he First Name property of the Person Model-->
        <ValidationMessage For="@(() => Person.FirstName)" /> <!-- ValidationMessage will put the error message right below the form field that had the issue-->
    </div>
    <div class="mb-3">
        <label>Last Name</label>
        <InputText @bind-Value="Person.LastName" DisplayName="Last Name"/> <!-- Binds to the Last Name property-->
        <ValidationMessage For="@(() => Person.LastName)" />
    </div>

    <!-- Text Area input demo-->
    <!-- Any HTML attributes, like rows, can be added to the Blazor tag. The C# won't know what to do with it, but the attribute will fall through to the HTML, which does know what to do with it-->
    <div class="mb-3">
        <label>Lifg Story</label>
        <InputTextArea @bind-Value="Person.LifeStory" DisplayName="Life Story" rows="4" width="30%"/>
    </div>

    <!-- CHeckbox (bool) example-->
    <div class="mb-3">
        <label>Is Enrolled</label>
        <InputCheckbox @bind-Value="Person.IsEnrolled" DisplayName="Is Enrolled"/>
    </div>

    <!--Date Input Example-->
    <div class="mb-3">
        <label>Date of Birth</label>
        <InputDate @bind-Value="Person.DateOfBirth" DisplayName="Date of Birth"/>
    </div>

    <!-- Number input Examples-->
    <div class="mb-3">
        <label>My Number</label>
        <InputNumber @bind-Value="Person.MyNumber" DisplayName="My Number"/>
        <ValidationMessage For="@(() => Person.MyNumber)" /> <!--If this is a int value, if you enter a double, it will fail validation because the datatype it's expecting is an int, as specifed in the propery-->
    </div>

    <!-- Radio Group Examples-->
    <div class="mb-3">
        <label>Department</label>
        <br />
        <InputRadioGroup @bind-Value="Person.Department" DisplayName="Department">
            @foreach(string dept in departments)
            {
                <InputRadio Value="@dept" /> @dept <br />
            }
        </InputRadioGroup>
    </div>

    <div class="mb-3">
        <label>Payroll Status</label>
        <br />
        <InputRadioGroup @bind-Value="Person.EmployeePayrollStatus" DisplayName="Payroill Status">
            @foreach(var status in Enum.GetValues(typeof(EmployeeType)))
            {
                <InputRadio Value="@status" /> @status <br />
            }
        </InputRadioGroup>
    </div>

    <!-- Input Select Examples-->
    <!--NOTE: InputSelect uses the HTML option tag for adding items, and does not have a Blazor specifc tag like InputRadio does-->
    <div class="mb-3">
        <InputSelect @bind-Value="Person.CellPhoneProvider" DisplayName="Cell Provider">
            @foreach(string cell in providers)
            {
                <option value="@cell">@cell</option> <!--Don't forget to go to C# mode on the value attribute! Else it won't work as expected-->
            }
        </InputSelect>
    </div>

    <button class="btn btn-primary" type="submit">
        Add Person
    </button>
</EditForm>

<h4>Bindind Example</h4>
<p>Below are a couple of fields that show/prove that binding works, and as long rendermode InteractiveAuto is set at the top of the page, the values of Person will be auto
    updated as they are selected!
</p>
<ul>
    <li>Department: @Person.Department</li>
    <li>Payroll Status: @Person.EmployeePayrollStatus</li>
    <li>Cell provider: @Person.CellPhoneProvider</li>
</ul>

@code {
    [SupplyParameterFromForm]
    private ValidatedPerson Person { get; set; } = new();

    List<ValidatedPerson> People = new List<ValidatedPerson>();
    private List<string> departments = new List<string>()
    {
        "HR",
        "IT",
        "Finance",
        "Marketing"
    };

    private List<string> providers = new List<string>()
    {
        "Verizon",
        "T-Mobile",
        "AT&T"
    };

    private void SubmitForm()
    {
        log.LogInformation($"The persons name: {Person.FirstName} {Person.LastName}");
        People.Add(Person);
        Person = new ValidatedPerson();
    }
}
